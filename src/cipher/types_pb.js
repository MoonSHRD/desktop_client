/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CreateChannelResp', null, global);
goog.exportSymbol('proto.CreateChannelTx', null, global);
goog.exportSymbol('proto.Identity', null, global);
goog.exportSymbol('proto.MapEntry', null, global);
goog.exportSymbol('proto.NewChannelPostTx', null, global);
goog.exportSymbol('proto.Null', null, global);
goog.exportSymbol('proto.SubscribeChannelTx', null, global);
goog.exportSymbol('proto.SubscribeIdentittyTx', null, global);
goog.exportSymbol('proto.TokenMeta', null, global);
goog.exportSymbol('proto.WrapInt', null, global);
goog.exportSymbol('proto.WrapStr', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Identity = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Identity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.Identity.displayName = 'proto.Identity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Identity.prototype.toObject = function(opt_includeInstance) {
        return proto.Identity.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Identity} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Identity.toObject = function(includeInstance, msg) {
        var f, obj = {
            firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
            username: jspb.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Identity}
 */
proto.Identity.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Identity;
    return proto.Identity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Identity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Identity}
 */
proto.Identity.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFirstName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setLastName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Identity.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.Identity.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Identity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Identity.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getFirstName();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getLastName();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
};


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.Identity.prototype.getFirstName = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Identity.prototype.setFirstName = function(value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.Identity.prototype.getLastName = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Identity.prototype.setLastName = function(value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.Identity.prototype.getUsername = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Identity.prototype.setUsername = function(value) {
    jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateChannelTx = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateChannelTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.CreateChannelTx.displayName = 'proto.CreateChannelTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.CreateChannelTx.prototype.toObject = function(opt_includeInstance) {
        return proto.CreateChannelTx.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.CreateChannelTx} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.CreateChannelTx.toObject = function(includeInstance, msg) {
        var f, obj = {
            addressSigned: jspb.Message.getFieldWithDefault(msg, 1, ""),
            name: jspb.Message.getFieldWithDefault(msg, 2, ""),
            pubKey: jspb.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateChannelTx}
 */
proto.CreateChannelTx.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.CreateChannelTx;
    return proto.CreateChannelTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateChannelTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateChannelTx}
 */
proto.CreateChannelTx.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddressSigned(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateChannelTx.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.CreateChannelTx.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateChannelTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateChannelTx.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getAddressSigned();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
};


/**
 * optional string address_signed = 1;
 * @return {string}
 */
proto.CreateChannelTx.prototype.getAddressSigned = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateChannelTx.prototype.setAddressSigned = function(value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.CreateChannelTx.prototype.getName = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CreateChannelTx.prototype.setName = function(value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string pub_key = 3;
 * @return {string}
 */
proto.CreateChannelTx.prototype.getPubKey = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CreateChannelTx.prototype.setPubKey = function(value) {
    jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateChannelResp = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateChannelResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.CreateChannelResp.displayName = 'proto.CreateChannelResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.CreateChannelResp.prototype.toObject = function(opt_includeInstance) {
        return proto.CreateChannelResp.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.CreateChannelResp} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.CreateChannelResp.toObject = function(includeInstance, msg) {
        var f, obj = {
            address: jspb.Message.getFieldWithDefault(msg, 1, ""),
            state: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateChannelResp}
 */
proto.CreateChannelResp.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.CreateChannelResp;
    return proto.CreateChannelResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateChannelResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateChannelResp}
 */
proto.CreateChannelResp.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setState(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateChannelResp.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.CreateChannelResp.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateChannelResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateChannelResp.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getAddress();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getState();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.CreateChannelResp.prototype.getAddress = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateChannelResp.prototype.setAddress = function(value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 state = 2;
 * @return {number}
 */
proto.CreateChannelResp.prototype.getState = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.CreateChannelResp.prototype.setState = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MapEntry = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MapEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.MapEntry.displayName = 'proto.MapEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.MapEntry.prototype.toObject = function(opt_includeInstance) {
        return proto.MapEntry.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.MapEntry} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.MapEntry.toObject = function(includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, ""),
            value: jspb.Message.getFieldWithDefault(msg, 2, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MapEntry}
 */
proto.MapEntry.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.MapEntry;
    return proto.MapEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MapEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MapEntry}
 */
proto.MapEntry.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MapEntry.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.MapEntry.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MapEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MapEntry.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.MapEntry.prototype.getKey = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MapEntry.prototype.setKey = function(value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.MapEntry.prototype.getValue = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MapEntry.prototype.setValue = function(value) {
    jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TokenMeta = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TokenMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TokenMeta.displayName = 'proto.TokenMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TokenMeta.prototype.toObject = function(opt_includeInstance) {
        return proto.TokenMeta.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TokenMeta} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TokenMeta.toObject = function(includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
            decimals: jspb.Message.getFieldWithDefault(msg, 3, 0),
            initialsupply: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TokenMeta}
 */
proto.TokenMeta.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TokenMeta;
    return proto.TokenMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TokenMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TokenMeta}
 */
proto.TokenMeta.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setSymbol(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDecimals(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setInitialsupply(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TokenMeta.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.TokenMeta.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TokenMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TokenMeta.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getSymbol();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getDecimals();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
    f = message.getInitialsupply();
    if (f !== 0) {
        writer.writeInt64(
            4,
            f
        );
    }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.TokenMeta.prototype.getName = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TokenMeta.prototype.setName = function(value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Symbol = 2;
 * @return {string}
 */
proto.TokenMeta.prototype.getSymbol = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TokenMeta.prototype.setSymbol = function(value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 Decimals = 3;
 * @return {number}
 */
proto.TokenMeta.prototype.getDecimals = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TokenMeta.prototype.setDecimals = function(value) {
    jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 InitialSupply = 4;
 * @return {number}
 */
proto.TokenMeta.prototype.getInitialsupply = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TokenMeta.prototype.setInitialsupply = function(value) {
    jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewChannelPostTx = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewChannelPostTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.NewChannelPostTx.displayName = 'proto.NewChannelPostTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.NewChannelPostTx.prototype.toObject = function(opt_includeInstance) {
        return proto.NewChannelPostTx.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.NewChannelPostTx} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.NewChannelPostTx.toObject = function(includeInstance, msg) {
        var f, obj = {
            version: jspb.Message.getFieldWithDefault(msg, 1, 0),
            owner: jspb.Message.getFieldWithDefault(msg, 2, ""),
            cid: jspb.Message.getFieldWithDefault(msg, 3, ""),
            data: msg.getData_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewChannelPostTx}
 */
proto.NewChannelPostTx.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.NewChannelPostTx;
    return proto.NewChannelPostTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewChannelPostTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewChannelPostTx}
 */
proto.NewChannelPostTx.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setVersion(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setOwner(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setCid(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewChannelPostTx.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.NewChannelPostTx.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewChannelPostTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewChannelPostTx.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getVersion();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getOwner();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getCid();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = message.getData_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            4,
            f
        );
    }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.NewChannelPostTx.prototype.getVersion = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NewChannelPostTx.prototype.setVersion = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string owner = 2;
 * @return {string}
 */
proto.NewChannelPostTx.prototype.getOwner = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NewChannelPostTx.prototype.setOwner = function(value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cid = 3;
 * @return {string}
 */
proto.NewChannelPostTx.prototype.getCid = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NewChannelPostTx.prototype.setCid = function(value) {
    jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.NewChannelPostTx.prototype.getData = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.NewChannelPostTx.prototype.getData_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.NewChannelPostTx.prototype.getData_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.NewChannelPostTx.prototype.setData = function(value) {
    jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubscribeIdentittyTx = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubscribeIdentittyTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.SubscribeIdentittyTx.displayName = 'proto.SubscribeIdentittyTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.SubscribeIdentittyTx.prototype.toObject = function(opt_includeInstance) {
        return proto.SubscribeIdentittyTx.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.SubscribeIdentittyTx} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.SubscribeIdentittyTx.toObject = function(includeInstance, msg) {
        var f, obj = {
            statt: jspb.Message.getFieldWithDefault(msg, 1, 0),
            conversationPubKey: msg.getConversationPubKey_asB64(),
            encryptedMessage: jspb.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubscribeIdentittyTx}
 */
proto.SubscribeIdentittyTx.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.SubscribeIdentittyTx;
    return proto.SubscribeIdentittyTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubscribeIdentittyTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubscribeIdentittyTx}
 */
proto.SubscribeIdentittyTx.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setStatt(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setConversationPubKey(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setEncryptedMessage(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubscribeIdentittyTx.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.SubscribeIdentittyTx.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubscribeIdentittyTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubscribeIdentittyTx.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getStatt();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getConversationPubKey_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
    f = message.getEncryptedMessage();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
};


/**
 * optional int32 statt = 1;
 * @return {number}
 */
proto.SubscribeIdentittyTx.prototype.getStatt = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SubscribeIdentittyTx.prototype.setStatt = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes conversation_pub_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.SubscribeIdentittyTx.prototype.getConversationPubKey = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes conversation_pub_key = 2;
 * This is a type-conversion wrapper around `getConversationPubKey()`
 * @return {string}
 */
proto.SubscribeIdentittyTx.prototype.getConversationPubKey_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getConversationPubKey()));
};


/**
 * optional bytes conversation_pub_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConversationPubKey()`
 * @return {!Uint8Array}
 */
proto.SubscribeIdentittyTx.prototype.getConversationPubKey_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getConversationPubKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.SubscribeIdentittyTx.prototype.setConversationPubKey = function(value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string encrypted_message = 3;
 * @return {string}
 */
proto.SubscribeIdentittyTx.prototype.getEncryptedMessage = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SubscribeIdentittyTx.prototype.setEncryptedMessage = function(value) {
    jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubscribeChannelTx = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubscribeChannelTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.SubscribeChannelTx.displayName = 'proto.SubscribeChannelTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.SubscribeChannelTx.prototype.toObject = function(opt_includeInstance) {
        return proto.SubscribeChannelTx.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.SubscribeChannelTx} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.SubscribeChannelTx.toObject = function(includeInstance, msg) {
        var f, obj = {
            deposit: jspb.Message.getFieldWithDefault(msg, 1, 0),
            subscriptionPubKey: msg.getSubscriptionPubKey_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubscribeChannelTx}
 */
proto.SubscribeChannelTx.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.SubscribeChannelTx;
    return proto.SubscribeChannelTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubscribeChannelTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubscribeChannelTx}
 */
proto.SubscribeChannelTx.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDeposit(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSubscriptionPubKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubscribeChannelTx.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.SubscribeChannelTx.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubscribeChannelTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubscribeChannelTx.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getDeposit();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getSubscriptionPubKey_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
};


/**
 * optional int32 deposit = 1;
 * @return {number}
 */
proto.SubscribeChannelTx.prototype.getDeposit = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SubscribeChannelTx.prototype.setDeposit = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes subscription_pub_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.SubscribeChannelTx.prototype.getSubscriptionPubKey = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes subscription_pub_key = 2;
 * This is a type-conversion wrapper around `getSubscriptionPubKey()`
 * @return {string}
 */
proto.SubscribeChannelTx.prototype.getSubscriptionPubKey_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSubscriptionPubKey()));
};


/**
 * optional bytes subscription_pub_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubscriptionPubKey()`
 * @return {!Uint8Array}
 */
proto.SubscribeChannelTx.prototype.getSubscriptionPubKey_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSubscriptionPubKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.SubscribeChannelTx.prototype.setSubscriptionPubKey = function(value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Null = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Null, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.Null.displayName = 'proto.Null';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Null.prototype.toObject = function(opt_includeInstance) {
        return proto.Null.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Null} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Null.toObject = function(includeInstance, msg) {
        var f, obj = {

        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Null}
 */
proto.Null.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Null;
    return proto.Null.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Null} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Null}
 */
proto.Null.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Null.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.Null.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Null} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Null.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WrapStr = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WrapStr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.WrapStr.displayName = 'proto.WrapStr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.WrapStr.prototype.toObject = function(opt_includeInstance) {
        return proto.WrapStr.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.WrapStr} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.WrapStr.toObject = function(includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WrapStr}
 */
proto.WrapStr.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.WrapStr;
    return proto.WrapStr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WrapStr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WrapStr}
 */
proto.WrapStr.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WrapStr.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.WrapStr.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WrapStr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WrapStr.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.WrapStr.prototype.getValue = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WrapStr.prototype.setValue = function(value) {
    jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WrapInt = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WrapInt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.WrapInt.displayName = 'proto.WrapInt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.WrapInt.prototype.toObject = function(opt_includeInstance) {
        return proto.WrapInt.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.WrapInt} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.WrapInt.toObject = function(includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WrapInt}
 */
proto.WrapInt.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.WrapInt;
    return proto.WrapInt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WrapInt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WrapInt}
 */
proto.WrapInt.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WrapInt.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.WrapInt.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WrapInt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WrapInt.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
};


/**
 * optional int64 value = 1;
 * @return {number}
 */
proto.WrapInt.prototype.getValue = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WrapInt.prototype.setValue = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto);
